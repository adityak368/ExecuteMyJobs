#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('ExecuteMyJobs:server')
var http = require('http')
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10)

    if (isNaN(port)) {
    // named pipe
        return val
    }

    if (port >= 0) {
    // port number
        return port
    }

    return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(bind + ' requires elevated privileges')
        process.exit(1)
        break
    case 'EADDRINUSE':
        console.error(bind + ' is already in use')
        process.exit(1)
        break
    default:
        throw error
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address()
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port
    debug('Listening on ' + bind)
}

//initialize socketio for agents
var SocketIO = require('../agentSocketManager')
SocketIO.initSocketio(server)


// var queue = require('../jobs/jobQueue').getQueue()
// setTimeout(function() {
//     queue.process('6427ad08-775a-4cb8-a606-45c0ac919d59', function(job,done) {
//                 var clients = SocketIO.getio().sockets.adapter.rooms[job.data.agent].sockets
//                 var socket = SocketIO.getio().sockets.sockets[Object.keys(clients)[0]]
//                 socket.on('joblog', function(response) {
//                     job.log(response.log)
//                 })
//                 socket.on('jobprogress',  function(response) {
//                     job.progress(response.progress,100)
//                 })
//                 socket.on('jobcompleted', function(response) {
//                     done()
//                 })
//                 socket.on('joberror', function(response) {
//                     done(new Error(response.error))
//                 })
        
//                 socket.emit('startjob', job)
//                 job.log('Agent Found. Started Job...')
//             })
// },30000)